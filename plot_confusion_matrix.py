import _init_paths
import pandas as pd
import yaml
from matplotlib import pyplot as plt
from munch import Munch
import argparse
import torch
from torch.autograd import Variable
from model.net import get_model
from dataloader.image_loader import get_loader
import warnings
import seaborn as sns
warnings.filterwarnings("ignore")
import numpy as np

def visualize_acc_conf(confusion_matrix, class_names):
    save_path = f'{args.model}_{args.image_dir.split("/")[0]}_{args.image_dir.split("/")[1]}_acc_conf.png'
    confusion_matrix = (confusion_matrix.T/confusion_matrix.sum(1)).T
    plt.figure(figsize=(15, 15))
    for row in range(len(confusion_matrix)):
        for col in range(len(confusion_matrix)):
            plt.annotate(str(np.round(confusion_matrix[row][col].numpy(), 2)), xy=(col, row), ha='center', va='center')

    plt.imshow(confusion_matrix)
    plt.yticks(range(len(confusion_matrix)), class_names)
    plt.xticks(range(len(confusion_matrix)), class_names)
    plt.ylabel('True label')
    plt.xlabel('Predicted label')
    plt.colorbar()
    plt.savefig('/content/drive/MyDrive/' + save_path)

def visualize_conf(confusion_matrix, class_names):
    save_path = f'{args.model}_{args.image_dir.split("/")[0]}_{args.image_dir.split("/")[1]}_conf.png'
    plt.figure(figsize=(15, 12))
    df_cm = pd.DataFrame(confusion_matrix, index=class_names, columns=class_names).astype(int)
    heatmap = sns.heatmap(df_cm, annot=True, fmt="d")

    heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=15)
    heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=45, ha='right', fontsize=15)
    plt.ylabel('True label')
    plt.xlabel('Predicted label')
    plt.savefig('/content/drive/MyDrive/' + save_path)

def plot_confusion_matrix():

    model = get_model(args, device)
    _, test_data_loader, labels_class = get_loader(args)
    confusion_matrix = torch.zeros((len(labels_class), len(labels_class)))
    with torch.no_grad():
        model.eval()
        for batch_idx, datasets in enumerate(test_data_loader):
            images, labels = datasets

            images = Variable(images.to(device))
            labels = Variable(labels.to(device))
            embed_feat = model(images)
            preds= torch.argmax(embed_feat, dim=1)
            for t, p in zip(labels.view(-1), preds.view(-1)):
                confusion_matrix[t.long(), p.long()] += 1

        print('Plotting...')
        visualize_conf(confusion_matrix, labels_class)
        visualize_acc_conf(confusion_matrix, labels_class)
        print('Finished!')

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='PyTorch Siamese Example')
    parser.add_argument('--config', default='config/myconfig.yaml', type=str, help='path to yaml config file')
    parser.add_argument('--cuda', action='store_true', default=True, help='enables CUDA training')
    global args, device, model

    args = parser.parse_args()
    args.cuda = args.cuda and torch.cuda.is_available()
    device = 'cuda' if args.cuda else 'cpu'
    with open(args.config) as f:
        params = yaml.full_load(f)
    args = Munch(params)

    plot_confusion_matrix()
