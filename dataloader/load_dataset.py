import pickle
from random import shuffle
import torch
import torchvision.transforms as transforms
from torch.utils.data import Dataset, DataLoader
import cv2
import numpy as np
from tqdm import tqdm
import os


class ImageLoader(Dataset):
    def __init__(self, config, mode: str = "train", id_k_fold: int = None):
        self._config = config
        self._mode = mode
        self._datasets = self._get_dataset()
        if id_k_fold:
            self._datasets = self._k_fold_dataset(id_k_fold=id_k_fold)
        self.transform = transforms.Compose(
            [
                transforms.ToTensor(),
                transforms.Normalize(
                    mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]
                ),
            ]
        )

    def _get_dataset(self):
        data_path = os.path.join(self._config.save_dir, 'data.pkl')
        if self._config.is_loaded:
            with open(data_path, "rb") as handle:
                datasets = pickle.load(handle)
            print(f"Loaded dataset from {data_path}")
        else:
            datasets = []
            print(f"Loading dataset to {data_path}")
            for label in self._config.classes:
                image_dir = os.path.join(self._config.image_dir, label)
                for image_path in tqdm(os.listdir(image_dir), desc=label):
                    image_path = os.path.join(image_dir, image_path)
                    if os.path.exists(image_path):
                        try:
                            image = self._process_image(
                                path=str(image_path), image_size=self._config.image_size
                            )
                            datasets.append([image, self._config.classes.index(label)])
                        except Exception as e:
                            print(e)
            shuffle(datasets)
            with open(data_path, "wb") as handle:
                pickle.dump(datasets, handle, protocol=pickle.HIGHEST_PROTOCOL)

        return datasets

    def _k_fold_indices(self, id_k_fold):
        test_size = int(len(self._datasets) * 1 / self._config.k_fold)

        start_test_size = int(test_size * (id_k_fold - 1))
        stop_test_size = min(int(test_size * id_k_fold), len(self._datasets))
        if self._mode == "train":
            indices = np.where(
                np.isin(
                    np.arange(len(self._datasets)),
                    np.arange(start_test_size, stop_test_size),
                    invert=True,
                )
            )[0]
        else:
            indices = np.arange(start_test_size, stop_test_size)

        return indices.tolist()

    def _k_fold_dataset(self, id_k_fold):
        indices = self._k_fold_indices(id_k_fold=id_k_fold)

        return [self._datasets[id] for id in indices]

    def _process_image(self, path, image_size):
        image = cv2.imread(path)
        w, h = image_size.split(",")
        if image.shape[0] > int(h) or image.shape[1] > int(w):
            inter = cv2.INTER_AREA
        else:
            inter = cv2.INTER_CUBIC
        image = cv2.resize(image, (int(w), int(h)), interpolation=inter)
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        return image

    def __getitem__(self, index):
        image, label = self._datasets[index]

        image = self.transform(image)
        return image, label

    def __len__(self):
        return len(self._datasets)


class ImageLoaderModule:
    def __init__(self, config):
        self._config = config

    def train_iter(self, id_k_fold: int = None):
        train_dataset = ImageLoader(config=self._config,
                                    mode='train',
                                    id_k_fold=id_k_fold)

        return DataLoader(
            dataset=train_dataset,
            batch_size=self._config.batch_size,
            shuffle=False,
            num_workers=self._config.num_workers,
        )
    
    def test_iter(self,id_k_fold: int = None):
        test_dataset = ImageLoader(config=self._config,
                                    mode='test',
                                    id_k_fold=id_k_fold)
        return DataLoader(
            dataset=test_dataset,
            batch_size=int(self._config.batch_size),
            shuffle = False,
            num_workers=int(self._config.num_workers),
        )

if __name__ == "__main__":
    import yaml
    from munch import Munch
    with open('config/myconfig.yaml') as f:
        params = yaml.full_load(f)
    args = Munch(params)
    
    dataset = ImageLoader(config=args)
