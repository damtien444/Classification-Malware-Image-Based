import numpy as np
import cv2
import glob
from PIL import Image
import matplotlib.pyplot as plt
import torch
import torchvision.transforms as transforms
import torch.nn.functional as F
import math

def load_image(image, device):
    means = (0.485, 0.456, 0.406)
    stds = (0.229, 0.224, 0.225)
    loader = transforms.Compose([transforms.ToTensor(), transforms.Normalize(means, stds)])
    return loader(image).to(device)

def read_image(path, device):
    image = cv2.imread(path)
    image = cv2.resize(image, (224,224))
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    return load_image(image, device)


def plot_predict_results(list_score, labels, args):
    path_test = args.test_dir
    save_path = path_test.replace(path_test.split('/')[-1], '') + 'predict.png'

    plt.figure(figsize=(15, 15))
    for row in range(len(labels)):
        for col in range(len(labels)):
            plt.annotate(str(np.round(list_score[row][col], 3)), xy=(col, row), ha='center', va='center')
    plt.imshow(list_score)
    plt.yticks(np.arange(12), labels)
    plt.xticks(np.arange(12), labels)
    plt.colorbar()
    plt.savefig(save_path)
